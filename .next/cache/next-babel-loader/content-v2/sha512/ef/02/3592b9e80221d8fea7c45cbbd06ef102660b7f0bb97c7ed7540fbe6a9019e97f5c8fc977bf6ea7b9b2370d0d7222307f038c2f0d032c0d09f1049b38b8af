{"ast":null,"code":"import { hashPassword } from \"../../../utils/auth-utils\";\nimport { connectToDataBase } from \"../../../utils/db-utils\";\n\nconst handler = async (req, res) => {\n  if (req.method === \"POST\") {\n    const data = req.body;\n    const {\n      email,\n      password\n    } = data;\n\n    if (!email || !email.includes(\"@\") || !password || password.trim().length < 7) {\n      res.status(422).json({\n        message: \"Invalid input-password should also be atleast 7 characters long\"\n      });\n      return;\n    }\n\n    const client = await connectToDataBase();\n    const db = client.db();\n    const existingUser = await db.collection(\"users\").findOne({\n      email: email\n    });\n\n    if (existingUser) {\n      res.status(422).json({\n        message: \"User exists already!\"\n      });\n      client.close();\n      return;\n    }\n\n    const hashedPassword = await hashPassword(password);\n    const result = await db.collection(\"users\").insertOne({\n      email: email,\n      password: hashedPassword\n    }); // console.log(result);\n\n    res.status(201).json({\n      message: \"Created user!\"\n    });\n    client.close();\n  }\n};\n\nexport default handler;","map":{"version":3,"sources":["/home/kedar/Documents/my projects/web/Next Js/nextjs-auth/pages/api/auth/signup.js"],"names":["hashPassword","connectToDataBase","handler","req","res","method","data","body","email","password","includes","trim","length","status","json","message","client","db","existingUser","collection","findOne","close","hashedPassword","result","insertOne"],"mappings":"AAAA,SAASA,YAAT,QAA6B,2BAA7B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBH,IAA5B;;AAEA,QACE,CAACE,KAAD,IACA,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CADD,IAEA,CAACD,QAFD,IAGAA,QAAQ,CAACE,IAAT,GAAgBC,MAAhB,GAAyB,CAJ3B,EAKE;AACAR,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,OAAO,EACL;AAFiB,OAArB;AAIA;AACD;;AACD,UAAMC,MAAM,GAAG,MAAMf,iBAAiB,EAAtC;AAEA,UAAMgB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,UAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAEZ,MAAAA,KAAK,EAAEA;AAAT,KAA/B,CAA3B;;AAEA,QAAIU,YAAJ,EAAkB;AAChBd,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACAC,MAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,UAAMC,cAAc,GAAG,MAAMtB,YAAY,CAACS,QAAD,CAAzC;AAEA,UAAMc,MAAM,GAAG,MAAMN,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBK,SAAvB,CAAiC;AACpDhB,MAAAA,KAAK,EAAEA,KAD6C;AAEpDC,MAAAA,QAAQ,EAAEa;AAF0C,KAAjC,CAArB,CA9ByB,CAmCzB;;AACAlB,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAC,IAAAA,MAAM,CAACK,KAAP;AACD;AACF,CAxCD;;AA0CA,eAAenB,OAAf","sourcesContent":["import { hashPassword } from \"../../../utils/auth-utils\";\nimport { connectToDataBase } from \"../../../utils/db-utils\";\n\nconst handler = async (req, res) => {\n  if (req.method === \"POST\") {\n    const data = req.body;\n    const { email, password } = data;\n\n    if (\n      !email ||\n      !email.includes(\"@\") ||\n      !password ||\n      password.trim().length < 7\n    ) {\n      res.status(422).json({\n        message:\n          \"Invalid input-password should also be atleast 7 characters long\",\n      });\n      return;\n    }\n    const client = await connectToDataBase();\n\n    const db = client.db();\n\n    const existingUser = await db.collection(\"users\").findOne({ email: email });\n\n    if (existingUser) {\n      res.status(422).json({ message: \"User exists already!\" });\n      client.close();\n      return;\n    }\n\n    const hashedPassword = await hashPassword(password);\n\n    const result = await db.collection(\"users\").insertOne({\n      email: email,\n      password: hashedPassword,\n    });\n\n    // console.log(result);\n    res.status(201).json({ message: \"Created user!\" });\n    client.close();\n  }\n};\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}