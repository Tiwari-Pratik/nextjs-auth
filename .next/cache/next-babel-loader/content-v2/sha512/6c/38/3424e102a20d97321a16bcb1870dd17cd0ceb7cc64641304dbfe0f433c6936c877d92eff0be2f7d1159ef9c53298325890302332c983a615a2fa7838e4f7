{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { verifyPassword } from \"../../../utils/auth-utils\";\nimport { connectToDataBase } from \"../../../utils/db-utils\";\nexport default NextAuth({\n  session: {\n    jwt: true\n  },\n  providers: [Providers.Credentials({\n    async authorize(credentials) {\n      const client = await connectToDataBase();\n      const usersCollection = client.db().collection(\"users\");\n      const user = await usersCollection.findOne({\n        email: credentials.email\n      });\n\n      if (!user) {\n        client.close();\n        throw new Error(\"no user found!\");\n      }\n\n      const isValidPassword = await verifyPassword(credentials.password, user.password);\n\n      if (!isValidPassword) {\n        client.close();\n        throw new Error(\"Could not log you in!\");\n      }\n\n      client.close();\n      return {\n        email: user.email\n      };\n    }\n\n  })]\n});","map":{"version":3,"sources":["/home/red/Desktop/Learning/web projects/web dev/web/Next/nextjs-auth/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","verifyPassword","connectToDataBase","session","jwt","providers","Credentials","authorize","credentials","client","usersCollection","db","collection","user","findOne","email","close","Error","isValidPassword","password"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA,eAAeH,QAAQ,CAAC;AACtBI,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GADa;AAItBC,EAAAA,SAAS,EAAE,CACTL,SAAS,CAACM,WAAV,CAAsB;AACpB,UAAMC,SAAN,CAAgBC,WAAhB,EAA6B;AAC3B,YAAMC,MAAM,GAAG,MAAMP,iBAAiB,EAAtC;AAEA,YAAMQ,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AAEA,YAAMC,IAAI,GAAG,MAAMH,eAAe,CAACI,OAAhB,CAAwB;AACzCC,QAAAA,KAAK,EAAEP,WAAW,CAACO;AADsB,OAAxB,CAAnB;;AAIA,UAAI,CAACF,IAAL,EAAW;AACTJ,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,YAAMC,eAAe,GAAG,MAAMjB,cAAc,CAC1CO,WAAW,CAACW,QAD8B,EAE1CN,IAAI,CAACM,QAFqC,CAA5C;;AAKA,UAAI,CAACD,eAAL,EAAsB;AACpBT,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAEDR,MAAAA,MAAM,CAACO,KAAP;AAEA,aAAO;AACLD,QAAAA,KAAK,EAAEF,IAAI,CAACE;AADP,OAAP;AAGD;;AA9BmB,GAAtB,CADS;AAJW,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { verifyPassword } from \"../../../utils/auth-utils\";\nimport { connectToDataBase } from \"../../../utils/db-utils\";\n\nexport default NextAuth({\n  session: {\n    jwt: true,\n  },\n  providers: [\n    Providers.Credentials({\n      async authorize(credentials) {\n        const client = await connectToDataBase();\n\n        const usersCollection = client.db().collection(\"users\");\n\n        const user = await usersCollection.findOne({\n          email: credentials.email,\n        });\n\n        if (!user) {\n          client.close();\n          throw new Error(\"no user found!\");\n        }\n\n        const isValidPassword = await verifyPassword(\n          credentials.password,\n          user.password\n        );\n\n        if (!isValidPassword) {\n          client.close();\n          throw new Error(\"Could not log you in!\");\n        }\n\n        client.close();\n\n        return {\n          email: user.email,\n        };\n      },\n    }),\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}